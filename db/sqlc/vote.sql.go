// Code generated by sqlc. DO NOT EDIT.
// source: vote.sql

package db

import (
	"context"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes (
  vote_national_id, candidate_id
) VALUES (
  $1, $2
)
RETURNING id, vote_national_id, candidate_id, create_at
`

type CreateVoteParams struct {
	VoteNationalID string `json:"vote_national_id"`
	CandidateID    int64  `json:"candidate_id"`
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote, arg.VoteNationalID, arg.CandidateID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.VoteNationalID,
		&i.CandidateID,
		&i.CreateAt,
	)
	return i, err
}

const listVoteOrderByCandidate = `-- name: ListVoteOrderByCandidate :many
SELECT 
 candidate_id,
 vote_national_id
 FROM votes
ORDER BY candidate_id
`

type ListVoteOrderByCandidateRow struct {
	CandidateID    int64  `json:"candidate_id"`
	VoteNationalID string `json:"vote_national_id"`
}

func (q *Queries) ListVoteOrderByCandidate(ctx context.Context) ([]ListVoteOrderByCandidateRow, error) {
	rows, err := q.db.QueryContext(ctx, listVoteOrderByCandidate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListVoteOrderByCandidateRow{}
	for rows.Next() {
		var i ListVoteOrderByCandidateRow
		if err := rows.Scan(&i.CandidateID, &i.VoteNationalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
