// Code generated by sqlc. DO NOT EDIT.
// source: election_property.sql

package db

import (
	"context"
)

const getElectionProperty = `-- name: GetElectionProperty :one
SELECT id, name, value, create_at FROM election_properties
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetElectionProperty(ctx context.Context, name string) (ElectionProperty, error) {
	row := q.db.QueryRowContext(ctx, getElectionProperty, name)
	var i ElectionProperty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.CreateAt,
	)
	return i, err
}

const updateElectionProperty = `-- name: UpdateElectionProperty :one
UPDATE election_properties SET value = $2
WHERE name = $1
RETURNING id, name, value, create_at
`

type UpdateElectionPropertyParams struct {
	Name  string `json:"name"`
	Value bool   `json:"value"`
}

func (q *Queries) UpdateElectionProperty(ctx context.Context, arg UpdateElectionPropertyParams) (ElectionProperty, error) {
	row := q.db.QueryRowContext(ctx, updateElectionProperty, arg.Name, arg.Value)
	var i ElectionProperty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.CreateAt,
	)
	return i, err
}
