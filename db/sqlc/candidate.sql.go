// Code generated by sqlc. DO NOT EDIT.
// source: candidate.sql

package db

import (
	"context"
	"time"
)

const createCandidate = `-- name: CreateCandidate :one
INSERT INTO candidates (
  name, dob, bio_link, image_url, policy, vote_count, percentage
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, dob, bio_link, image_url, policy, vote_count, percentage, create_at
`

type CreateCandidateParams struct {
	Name       string `json:"name"`
	Dob        string `json:"dob"`
	BioLink    string `json:"bio_link"`
	ImageUrl   string `json:"image_url"`
	Policy     string `json:"policy"`
	VoteCount  int32  `json:"vote_count"`
	Percentage int32  `json:"percentage"`
}

func (q *Queries) CreateCandidate(ctx context.Context, arg CreateCandidateParams) (Candidate, error) {
	row := q.db.QueryRowContext(ctx, createCandidate,
		arg.Name,
		arg.Dob,
		arg.BioLink,
		arg.ImageUrl,
		arg.Policy,
		arg.VoteCount,
		arg.Percentage,
	)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.BioLink,
		&i.ImageUrl,
		&i.Policy,
		&i.VoteCount,
		&i.Percentage,
		&i.CreateAt,
	)
	return i, err
}

const deleteCandidate = `-- name: DeleteCandidate :exec
DELETE FROM candidates
WHERE id = $1
`

func (q *Queries) DeleteCandidate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCandidate, id)
	return err
}

const getCandidate = `-- name: GetCandidate :one
SELECT 
  id,
  name,
  dob,
  bio_link,
  image_url,
  policy,
  vote_count,
  create_at
FROM candidates
WHERE id = $1 LIMIT 1
`

type GetCandidateRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Dob       string    `json:"dob"`
	BioLink   string    `json:"bio_link"`
	ImageUrl  string    `json:"image_url"`
	Policy    string    `json:"policy"`
	VoteCount int32     `json:"vote_count"`
	CreateAt  time.Time `json:"create_at"`
}

func (q *Queries) GetCandidate(ctx context.Context, id int64) (GetCandidateRow, error) {
	row := q.db.QueryRowContext(ctx, getCandidate, id)
	var i GetCandidateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.BioLink,
		&i.ImageUrl,
		&i.Policy,
		&i.VoteCount,
		&i.CreateAt,
	)
	return i, err
}

const listCandidates = `-- name: ListCandidates :many
SELECT 
  id,
  name,
  dob,
  bio_link,
  image_url,
  policy,
  vote_count,
  create_at
FROM candidates
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCandidatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListCandidatesRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Dob       string    `json:"dob"`
	BioLink   string    `json:"bio_link"`
	ImageUrl  string    `json:"image_url"`
	Policy    string    `json:"policy"`
	VoteCount int32     `json:"vote_count"`
	CreateAt  time.Time `json:"create_at"`
}

func (q *Queries) ListCandidates(ctx context.Context, arg ListCandidatesParams) ([]ListCandidatesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCandidates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCandidatesRow{}
	for rows.Next() {
		var i ListCandidatesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.BioLink,
			&i.ImageUrl,
			&i.Policy,
			&i.VoteCount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCandidatesResult = `-- name: ListCandidatesResult :many
SELECT 
  id,
  name,
  dob,
  bio_link,
  image_url,
  policy,
  vote_count,
  CONCAT(percentage, '%')::text as percentage,
  create_at
 FROM candidates
ORDER BY vote_count DESC
`

type ListCandidatesResultRow struct {
	ID         int64     `json:"id"`
	Name       string    `json:"name"`
	Dob        string    `json:"dob"`
	BioLink    string    `json:"bio_link"`
	ImageUrl   string    `json:"image_url"`
	Policy     string    `json:"policy"`
	VoteCount  int32     `json:"vote_count"`
	Percentage string    `json:"percentage"`
	CreateAt   time.Time `json:"create_at"`
}

func (q *Queries) ListCandidatesResult(ctx context.Context) ([]ListCandidatesResultRow, error) {
	rows, err := q.db.QueryContext(ctx, listCandidatesResult)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCandidatesResultRow{}
	for rows.Next() {
		var i ListCandidatesResultRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.BioLink,
			&i.ImageUrl,
			&i.Policy,
			&i.VoteCount,
			&i.Percentage,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCandidate = `-- name: UpdateCandidate :one
UPDATE candidates SET name = $2, dob = $3, bio_link = $4, image_url = $5, policy = $6
WHERE id = $1
RETURNING   
  id,
  name,
  dob,
  bio_link,
  image_url,
  policy,
  vote_count,
  create_at
`

type UpdateCandidateParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Dob      string `json:"dob"`
	BioLink  string `json:"bio_link"`
	ImageUrl string `json:"image_url"`
	Policy   string `json:"policy"`
}

type UpdateCandidateRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Dob       string    `json:"dob"`
	BioLink   string    `json:"bio_link"`
	ImageUrl  string    `json:"image_url"`
	Policy    string    `json:"policy"`
	VoteCount int32     `json:"vote_count"`
	CreateAt  time.Time `json:"create_at"`
}

func (q *Queries) UpdateCandidate(ctx context.Context, arg UpdateCandidateParams) (UpdateCandidateRow, error) {
	row := q.db.QueryRowContext(ctx, updateCandidate,
		arg.ID,
		arg.Name,
		arg.Dob,
		arg.BioLink,
		arg.ImageUrl,
		arg.Policy,
	)
	var i UpdateCandidateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.BioLink,
		&i.ImageUrl,
		&i.Policy,
		&i.VoteCount,
		&i.CreateAt,
	)
	return i, err
}
