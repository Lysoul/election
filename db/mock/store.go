// Code generated by MockGen. DO NOT EDIT.
// Source: election/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "election/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCandidate mocks base method.
func (m *MockStore) CreateCandidate(arg0 context.Context, arg1 db.CreateCandidateParams) (db.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandidate", arg0, arg1)
	ret0, _ := ret[0].(db.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandidate indicates an expected call of CreateCandidate.
func (mr *MockStoreMockRecorder) CreateCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandidate", reflect.TypeOf((*MockStore)(nil).CreateCandidate), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateVote mocks base method.
func (m *MockStore) CreateVote(arg0 context.Context, arg1 db.CreateVoteParams) (db.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", arg0, arg1)
	ret0, _ := ret[0].(db.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockStoreMockRecorder) CreateVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockStore)(nil).CreateVote), arg0, arg1)
}

// DeleteCandidate mocks base method.
func (m *MockStore) DeleteCandidate(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandidate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCandidate indicates an expected call of DeleteCandidate.
func (mr *MockStoreMockRecorder) DeleteCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandidate", reflect.TypeOf((*MockStore)(nil).DeleteCandidate), arg0, arg1)
}

// GetCandidate mocks base method.
func (m *MockStore) GetCandidate(arg0 context.Context, arg1 int64) (db.GetCandidateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidate", arg0, arg1)
	ret0, _ := ret[0].(db.GetCandidateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidate indicates an expected call of GetCandidate.
func (mr *MockStoreMockRecorder) GetCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidate", reflect.TypeOf((*MockStore)(nil).GetCandidate), arg0, arg1)
}

// GetElectionProperty mocks base method.
func (m *MockStore) GetElectionProperty(arg0 context.Context, arg1 string) (db.ElectionProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElectionProperty", arg0, arg1)
	ret0, _ := ret[0].(db.ElectionProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElectionProperty indicates an expected call of GetElectionProperty.
func (mr *MockStoreMockRecorder) GetElectionProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElectionProperty", reflect.TypeOf((*MockStore)(nil).GetElectionProperty), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListCandidates mocks base method.
func (m *MockStore) ListCandidates(arg0 context.Context, arg1 db.ListCandidatesParams) ([]db.ListCandidatesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCandidates", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCandidatesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCandidates indicates an expected call of ListCandidates.
func (mr *MockStoreMockRecorder) ListCandidates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCandidates", reflect.TypeOf((*MockStore)(nil).ListCandidates), arg0, arg1)
}

// ListCandidatesResult mocks base method.
func (m *MockStore) ListCandidatesResult(arg0 context.Context) ([]db.ListCandidatesResultRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCandidatesResult", arg0)
	ret0, _ := ret[0].([]db.ListCandidatesResultRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCandidatesResult indicates an expected call of ListCandidatesResult.
func (mr *MockStoreMockRecorder) ListCandidatesResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCandidatesResult", reflect.TypeOf((*MockStore)(nil).ListCandidatesResult), arg0)
}

// ListVoteOrderByCandidate mocks base method.
func (m *MockStore) ListVoteOrderByCandidate(arg0 context.Context) ([]db.ListVoteOrderByCandidateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoteOrderByCandidate", arg0)
	ret0, _ := ret[0].([]db.ListVoteOrderByCandidateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoteOrderByCandidate indicates an expected call of ListVoteOrderByCandidate.
func (mr *MockStoreMockRecorder) ListVoteOrderByCandidate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoteOrderByCandidate", reflect.TypeOf((*MockStore)(nil).ListVoteOrderByCandidate), arg0)
}

// UpdateCandidate mocks base method.
func (m *MockStore) UpdateCandidate(arg0 context.Context, arg1 db.UpdateCandidateParams) (db.UpdateCandidateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidate", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateCandidateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCandidate indicates an expected call of UpdateCandidate.
func (mr *MockStoreMockRecorder) UpdateCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidate", reflect.TypeOf((*MockStore)(nil).UpdateCandidate), arg0, arg1)
}

// UpdateElectionProperty mocks base method.
func (m *MockStore) UpdateElectionProperty(arg0 context.Context, arg1 db.UpdateElectionPropertyParams) (db.ElectionProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElectionProperty", arg0, arg1)
	ret0, _ := ret[0].(db.ElectionProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateElectionProperty indicates an expected call of UpdateElectionProperty.
func (mr *MockStoreMockRecorder) UpdateElectionProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElectionProperty", reflect.TypeOf((*MockStore)(nil).UpdateElectionProperty), arg0, arg1)
}
