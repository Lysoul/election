// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  national_id, hashed_password, full_name, email, permission, has_voted
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING national_id, hashed_password, full_name, email, permission, has_voted, password_changed_at, create_at
`

type CreateUserParams struct {
	NationalID     string   `json:"national_id"`
	HashedPassword string   `json:"hashed_password"`
	FullName       string   `json:"full_name"`
	Email          string   `json:"email"`
	Permission     []string `json:"permission"`
	HasVoted       bool     `json:"has_voted"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.NationalID,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		pq.Array(arg.Permission),
		arg.HasVoted,
	)
	var i User
	err := row.Scan(
		&i.NationalID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		pq.Array(&i.Permission),
		&i.HasVoted,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT national_id, hashed_password, full_name, email, permission, has_voted, password_changed_at, create_at FROM users
WHERE national_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, nationalID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, nationalID)
	var i User
	err := row.Scan(
		&i.NationalID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		pq.Array(&i.Permission),
		&i.HasVoted,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}
